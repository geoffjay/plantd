// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: plantd/state/v1/state.proto

package statev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v11 "github.com/geoffjay/plantd/gen/proto/go/plantd/health/v1"
	v1 "github.com/geoffjay/plantd/gen/proto/go/plantd/state/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// StateServiceName is the fully-qualified name of the StateService service.
	StateServiceName = "plantd.state.v1.StateService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// StateServiceGetProcedure is the fully-qualified name of the StateService's Get RPC.
	StateServiceGetProcedure = "/plantd.state.v1.StateService/Get"
	// StateServiceSetProcedure is the fully-qualified name of the StateService's Set RPC.
	StateServiceSetProcedure = "/plantd.state.v1.StateService/Set"
	// StateServiceDeleteProcedure is the fully-qualified name of the StateService's Delete RPC.
	StateServiceDeleteProcedure = "/plantd.state.v1.StateService/Delete"
	// StateServiceBatchGetProcedure is the fully-qualified name of the StateService's BatchGet RPC.
	StateServiceBatchGetProcedure = "/plantd.state.v1.StateService/BatchGet"
	// StateServiceBatchSetProcedure is the fully-qualified name of the StateService's BatchSet RPC.
	StateServiceBatchSetProcedure = "/plantd.state.v1.StateService/BatchSet"
	// StateServiceListProcedure is the fully-qualified name of the StateService's List RPC.
	StateServiceListProcedure = "/plantd.state.v1.StateService/List"
	// StateServiceSearchProcedure is the fully-qualified name of the StateService's Search RPC.
	StateServiceSearchProcedure = "/plantd.state.v1.StateService/Search"
	// StateServiceWatchProcedure is the fully-qualified name of the StateService's Watch RPC.
	StateServiceWatchProcedure = "/plantd.state.v1.StateService/Watch"
	// StateServiceHealthProcedure is the fully-qualified name of the StateService's Health RPC.
	StateServiceHealthProcedure = "/plantd.state.v1.StateService/Health"
)

// StateServiceClient is a client for the plantd.state.v1.StateService service.
type StateServiceClient interface {
	// Basic CRUD operations
	Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error)
	Set(context.Context, *connect.Request[v1.SetRequest]) (*connect.Response[v1.SetResponse], error)
	Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error)
	// Bulk operations
	BatchGet(context.Context, *connect.Request[v1.BatchGetRequest]) (*connect.Response[v1.BatchGetResponse], error)
	BatchSet(context.Context, *connect.Request[v1.BatchSetRequest]) (*connect.Response[v1.BatchSetResponse], error)
	// Listing and searching
	List(context.Context, *connect.Request[v1.ListRequest]) (*connect.ServerStreamForClient[v1.ListResponse], error)
	Search(context.Context, *connect.Request[v1.SearchRequest]) (*connect.Response[v1.SearchResponse], error)
	// Real-time updates
	Watch(context.Context, *connect.Request[v1.WatchRequest]) (*connect.ServerStreamForClient[v1.WatchResponse], error)
	// Service management
	Health(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v11.HealthCheckResponse], error)
}

// NewStateServiceClient constructs a client for the plantd.state.v1.StateService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStateServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) StateServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	stateServiceMethods := v1.File_plantd_state_v1_state_proto.Services().ByName("StateService").Methods()
	return &stateServiceClient{
		get: connect.NewClient[v1.GetRequest, v1.GetResponse](
			httpClient,
			baseURL+StateServiceGetProcedure,
			connect.WithSchema(stateServiceMethods.ByName("Get")),
			connect.WithClientOptions(opts...),
		),
		set: connect.NewClient[v1.SetRequest, v1.SetResponse](
			httpClient,
			baseURL+StateServiceSetProcedure,
			connect.WithSchema(stateServiceMethods.ByName("Set")),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[v1.DeleteRequest, v1.DeleteResponse](
			httpClient,
			baseURL+StateServiceDeleteProcedure,
			connect.WithSchema(stateServiceMethods.ByName("Delete")),
			connect.WithClientOptions(opts...),
		),
		batchGet: connect.NewClient[v1.BatchGetRequest, v1.BatchGetResponse](
			httpClient,
			baseURL+StateServiceBatchGetProcedure,
			connect.WithSchema(stateServiceMethods.ByName("BatchGet")),
			connect.WithClientOptions(opts...),
		),
		batchSet: connect.NewClient[v1.BatchSetRequest, v1.BatchSetResponse](
			httpClient,
			baseURL+StateServiceBatchSetProcedure,
			connect.WithSchema(stateServiceMethods.ByName("BatchSet")),
			connect.WithClientOptions(opts...),
		),
		list: connect.NewClient[v1.ListRequest, v1.ListResponse](
			httpClient,
			baseURL+StateServiceListProcedure,
			connect.WithSchema(stateServiceMethods.ByName("List")),
			connect.WithClientOptions(opts...),
		),
		search: connect.NewClient[v1.SearchRequest, v1.SearchResponse](
			httpClient,
			baseURL+StateServiceSearchProcedure,
			connect.WithSchema(stateServiceMethods.ByName("Search")),
			connect.WithClientOptions(opts...),
		),
		watch: connect.NewClient[v1.WatchRequest, v1.WatchResponse](
			httpClient,
			baseURL+StateServiceWatchProcedure,
			connect.WithSchema(stateServiceMethods.ByName("Watch")),
			connect.WithClientOptions(opts...),
		),
		health: connect.NewClient[emptypb.Empty, v11.HealthCheckResponse](
			httpClient,
			baseURL+StateServiceHealthProcedure,
			connect.WithSchema(stateServiceMethods.ByName("Health")),
			connect.WithClientOptions(opts...),
		),
	}
}

// stateServiceClient implements StateServiceClient.
type stateServiceClient struct {
	get      *connect.Client[v1.GetRequest, v1.GetResponse]
	set      *connect.Client[v1.SetRequest, v1.SetResponse]
	delete   *connect.Client[v1.DeleteRequest, v1.DeleteResponse]
	batchGet *connect.Client[v1.BatchGetRequest, v1.BatchGetResponse]
	batchSet *connect.Client[v1.BatchSetRequest, v1.BatchSetResponse]
	list     *connect.Client[v1.ListRequest, v1.ListResponse]
	search   *connect.Client[v1.SearchRequest, v1.SearchResponse]
	watch    *connect.Client[v1.WatchRequest, v1.WatchResponse]
	health   *connect.Client[emptypb.Empty, v11.HealthCheckResponse]
}

// Get calls plantd.state.v1.StateService.Get.
func (c *stateServiceClient) Get(ctx context.Context, req *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// Set calls plantd.state.v1.StateService.Set.
func (c *stateServiceClient) Set(ctx context.Context, req *connect.Request[v1.SetRequest]) (*connect.Response[v1.SetResponse], error) {
	return c.set.CallUnary(ctx, req)
}

// Delete calls plantd.state.v1.StateService.Delete.
func (c *stateServiceClient) Delete(ctx context.Context, req *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// BatchGet calls plantd.state.v1.StateService.BatchGet.
func (c *stateServiceClient) BatchGet(ctx context.Context, req *connect.Request[v1.BatchGetRequest]) (*connect.Response[v1.BatchGetResponse], error) {
	return c.batchGet.CallUnary(ctx, req)
}

// BatchSet calls plantd.state.v1.StateService.BatchSet.
func (c *stateServiceClient) BatchSet(ctx context.Context, req *connect.Request[v1.BatchSetRequest]) (*connect.Response[v1.BatchSetResponse], error) {
	return c.batchSet.CallUnary(ctx, req)
}

// List calls plantd.state.v1.StateService.List.
func (c *stateServiceClient) List(ctx context.Context, req *connect.Request[v1.ListRequest]) (*connect.ServerStreamForClient[v1.ListResponse], error) {
	return c.list.CallServerStream(ctx, req)
}

// Search calls plantd.state.v1.StateService.Search.
func (c *stateServiceClient) Search(ctx context.Context, req *connect.Request[v1.SearchRequest]) (*connect.Response[v1.SearchResponse], error) {
	return c.search.CallUnary(ctx, req)
}

// Watch calls plantd.state.v1.StateService.Watch.
func (c *stateServiceClient) Watch(ctx context.Context, req *connect.Request[v1.WatchRequest]) (*connect.ServerStreamForClient[v1.WatchResponse], error) {
	return c.watch.CallServerStream(ctx, req)
}

// Health calls plantd.state.v1.StateService.Health.
func (c *stateServiceClient) Health(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v11.HealthCheckResponse], error) {
	return c.health.CallUnary(ctx, req)
}

// StateServiceHandler is an implementation of the plantd.state.v1.StateService service.
type StateServiceHandler interface {
	// Basic CRUD operations
	Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error)
	Set(context.Context, *connect.Request[v1.SetRequest]) (*connect.Response[v1.SetResponse], error)
	Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error)
	// Bulk operations
	BatchGet(context.Context, *connect.Request[v1.BatchGetRequest]) (*connect.Response[v1.BatchGetResponse], error)
	BatchSet(context.Context, *connect.Request[v1.BatchSetRequest]) (*connect.Response[v1.BatchSetResponse], error)
	// Listing and searching
	List(context.Context, *connect.Request[v1.ListRequest], *connect.ServerStream[v1.ListResponse]) error
	Search(context.Context, *connect.Request[v1.SearchRequest]) (*connect.Response[v1.SearchResponse], error)
	// Real-time updates
	Watch(context.Context, *connect.Request[v1.WatchRequest], *connect.ServerStream[v1.WatchResponse]) error
	// Service management
	Health(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v11.HealthCheckResponse], error)
}

// NewStateServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStateServiceHandler(svc StateServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	stateServiceMethods := v1.File_plantd_state_v1_state_proto.Services().ByName("StateService").Methods()
	stateServiceGetHandler := connect.NewUnaryHandler(
		StateServiceGetProcedure,
		svc.Get,
		connect.WithSchema(stateServiceMethods.ByName("Get")),
		connect.WithHandlerOptions(opts...),
	)
	stateServiceSetHandler := connect.NewUnaryHandler(
		StateServiceSetProcedure,
		svc.Set,
		connect.WithSchema(stateServiceMethods.ByName("Set")),
		connect.WithHandlerOptions(opts...),
	)
	stateServiceDeleteHandler := connect.NewUnaryHandler(
		StateServiceDeleteProcedure,
		svc.Delete,
		connect.WithSchema(stateServiceMethods.ByName("Delete")),
		connect.WithHandlerOptions(opts...),
	)
	stateServiceBatchGetHandler := connect.NewUnaryHandler(
		StateServiceBatchGetProcedure,
		svc.BatchGet,
		connect.WithSchema(stateServiceMethods.ByName("BatchGet")),
		connect.WithHandlerOptions(opts...),
	)
	stateServiceBatchSetHandler := connect.NewUnaryHandler(
		StateServiceBatchSetProcedure,
		svc.BatchSet,
		connect.WithSchema(stateServiceMethods.ByName("BatchSet")),
		connect.WithHandlerOptions(opts...),
	)
	stateServiceListHandler := connect.NewServerStreamHandler(
		StateServiceListProcedure,
		svc.List,
		connect.WithSchema(stateServiceMethods.ByName("List")),
		connect.WithHandlerOptions(opts...),
	)
	stateServiceSearchHandler := connect.NewUnaryHandler(
		StateServiceSearchProcedure,
		svc.Search,
		connect.WithSchema(stateServiceMethods.ByName("Search")),
		connect.WithHandlerOptions(opts...),
	)
	stateServiceWatchHandler := connect.NewServerStreamHandler(
		StateServiceWatchProcedure,
		svc.Watch,
		connect.WithSchema(stateServiceMethods.ByName("Watch")),
		connect.WithHandlerOptions(opts...),
	)
	stateServiceHealthHandler := connect.NewUnaryHandler(
		StateServiceHealthProcedure,
		svc.Health,
		connect.WithSchema(stateServiceMethods.ByName("Health")),
		connect.WithHandlerOptions(opts...),
	)
	return "/plantd.state.v1.StateService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case StateServiceGetProcedure:
			stateServiceGetHandler.ServeHTTP(w, r)
		case StateServiceSetProcedure:
			stateServiceSetHandler.ServeHTTP(w, r)
		case StateServiceDeleteProcedure:
			stateServiceDeleteHandler.ServeHTTP(w, r)
		case StateServiceBatchGetProcedure:
			stateServiceBatchGetHandler.ServeHTTP(w, r)
		case StateServiceBatchSetProcedure:
			stateServiceBatchSetHandler.ServeHTTP(w, r)
		case StateServiceListProcedure:
			stateServiceListHandler.ServeHTTP(w, r)
		case StateServiceSearchProcedure:
			stateServiceSearchHandler.ServeHTTP(w, r)
		case StateServiceWatchProcedure:
			stateServiceWatchHandler.ServeHTTP(w, r)
		case StateServiceHealthProcedure:
			stateServiceHealthHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedStateServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedStateServiceHandler struct{}

func (UnimplementedStateServiceHandler) Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("plantd.state.v1.StateService.Get is not implemented"))
}

func (UnimplementedStateServiceHandler) Set(context.Context, *connect.Request[v1.SetRequest]) (*connect.Response[v1.SetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("plantd.state.v1.StateService.Set is not implemented"))
}

func (UnimplementedStateServiceHandler) Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("plantd.state.v1.StateService.Delete is not implemented"))
}

func (UnimplementedStateServiceHandler) BatchGet(context.Context, *connect.Request[v1.BatchGetRequest]) (*connect.Response[v1.BatchGetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("plantd.state.v1.StateService.BatchGet is not implemented"))
}

func (UnimplementedStateServiceHandler) BatchSet(context.Context, *connect.Request[v1.BatchSetRequest]) (*connect.Response[v1.BatchSetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("plantd.state.v1.StateService.BatchSet is not implemented"))
}

func (UnimplementedStateServiceHandler) List(context.Context, *connect.Request[v1.ListRequest], *connect.ServerStream[v1.ListResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("plantd.state.v1.StateService.List is not implemented"))
}

func (UnimplementedStateServiceHandler) Search(context.Context, *connect.Request[v1.SearchRequest]) (*connect.Response[v1.SearchResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("plantd.state.v1.StateService.Search is not implemented"))
}

func (UnimplementedStateServiceHandler) Watch(context.Context, *connect.Request[v1.WatchRequest], *connect.ServerStream[v1.WatchResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("plantd.state.v1.StateService.Watch is not implemented"))
}

func (UnimplementedStateServiceHandler) Health(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v11.HealthCheckResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("plantd.state.v1.StateService.Health is not implemented"))
}
