// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: plantd/identity/v1/identity.proto

package identityv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v11 "github.com/geoffjay/plantd/gen/proto/go/plantd/health/v1"
	v1 "github.com/geoffjay/plantd/gen/proto/go/plantd/identity/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// IdentityServiceName is the fully-qualified name of the IdentityService service.
	IdentityServiceName = "plantd.identity.v1.IdentityService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// IdentityServiceLoginProcedure is the fully-qualified name of the IdentityService's Login RPC.
	IdentityServiceLoginProcedure = "/plantd.identity.v1.IdentityService/Login"
	// IdentityServiceLogoutProcedure is the fully-qualified name of the IdentityService's Logout RPC.
	IdentityServiceLogoutProcedure = "/plantd.identity.v1.IdentityService/Logout"
	// IdentityServiceRefreshTokenProcedure is the fully-qualified name of the IdentityService's
	// RefreshToken RPC.
	IdentityServiceRefreshTokenProcedure = "/plantd.identity.v1.IdentityService/RefreshToken"
	// IdentityServiceValidateTokenProcedure is the fully-qualified name of the IdentityService's
	// ValidateToken RPC.
	IdentityServiceValidateTokenProcedure = "/plantd.identity.v1.IdentityService/ValidateToken"
	// IdentityServiceCreateUserProcedure is the fully-qualified name of the IdentityService's
	// CreateUser RPC.
	IdentityServiceCreateUserProcedure = "/plantd.identity.v1.IdentityService/CreateUser"
	// IdentityServiceGetUserProcedure is the fully-qualified name of the IdentityService's GetUser RPC.
	IdentityServiceGetUserProcedure = "/plantd.identity.v1.IdentityService/GetUser"
	// IdentityServiceUpdateUserProcedure is the fully-qualified name of the IdentityService's
	// UpdateUser RPC.
	IdentityServiceUpdateUserProcedure = "/plantd.identity.v1.IdentityService/UpdateUser"
	// IdentityServiceDeleteUserProcedure is the fully-qualified name of the IdentityService's
	// DeleteUser RPC.
	IdentityServiceDeleteUserProcedure = "/plantd.identity.v1.IdentityService/DeleteUser"
	// IdentityServiceListUsersProcedure is the fully-qualified name of the IdentityService's ListUsers
	// RPC.
	IdentityServiceListUsersProcedure = "/plantd.identity.v1.IdentityService/ListUsers"
	// IdentityServiceCreateOrganizationProcedure is the fully-qualified name of the IdentityService's
	// CreateOrganization RPC.
	IdentityServiceCreateOrganizationProcedure = "/plantd.identity.v1.IdentityService/CreateOrganization"
	// IdentityServiceGetOrganizationProcedure is the fully-qualified name of the IdentityService's
	// GetOrganization RPC.
	IdentityServiceGetOrganizationProcedure = "/plantd.identity.v1.IdentityService/GetOrganization"
	// IdentityServiceAssignRoleProcedure is the fully-qualified name of the IdentityService's
	// AssignRole RPC.
	IdentityServiceAssignRoleProcedure = "/plantd.identity.v1.IdentityService/AssignRole"
	// IdentityServiceRevokeRoleProcedure is the fully-qualified name of the IdentityService's
	// RevokeRole RPC.
	IdentityServiceRevokeRoleProcedure = "/plantd.identity.v1.IdentityService/RevokeRole"
	// IdentityServiceCheckPermissionProcedure is the fully-qualified name of the IdentityService's
	// CheckPermission RPC.
	IdentityServiceCheckPermissionProcedure = "/plantd.identity.v1.IdentityService/CheckPermission"
	// IdentityServiceHealthProcedure is the fully-qualified name of the IdentityService's Health RPC.
	IdentityServiceHealthProcedure = "/plantd.identity.v1.IdentityService/Health"
)

// IdentityServiceClient is a client for the plantd.identity.v1.IdentityService service.
type IdentityServiceClient interface {
	// Authentication
	Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error)
	Logout(context.Context, *connect.Request[v1.LogoutRequest]) (*connect.Response[emptypb.Empty], error)
	RefreshToken(context.Context, *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error)
	ValidateToken(context.Context, *connect.Request[v1.ValidateTokenRequest]) (*connect.Response[v1.ValidateTokenResponse], error)
	// User management
	CreateUser(context.Context, *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error)
	GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error)
	UpdateUser(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error)
	DeleteUser(context.Context, *connect.Request[v1.DeleteUserRequest]) (*connect.Response[emptypb.Empty], error)
	ListUsers(context.Context, *connect.Request[v1.ListUsersRequest]) (*connect.ServerStreamForClient[v1.ListUsersResponse], error)
	// Organization management
	CreateOrganization(context.Context, *connect.Request[v1.CreateOrganizationRequest]) (*connect.Response[v1.CreateOrganizationResponse], error)
	GetOrganization(context.Context, *connect.Request[v1.GetOrganizationRequest]) (*connect.Response[v1.GetOrganizationResponse], error)
	// Role and permission management
	AssignRole(context.Context, *connect.Request[v1.AssignRoleRequest]) (*connect.Response[emptypb.Empty], error)
	RevokeRole(context.Context, *connect.Request[v1.RevokeRoleRequest]) (*connect.Response[emptypb.Empty], error)
	CheckPermission(context.Context, *connect.Request[v1.CheckPermissionRequest]) (*connect.Response[v1.CheckPermissionResponse], error)
	// Service management
	Health(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v11.HealthCheckResponse], error)
}

// NewIdentityServiceClient constructs a client for the plantd.identity.v1.IdentityService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewIdentityServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) IdentityServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	identityServiceMethods := v1.File_plantd_identity_v1_identity_proto.Services().ByName("IdentityService").Methods()
	return &identityServiceClient{
		login: connect.NewClient[v1.LoginRequest, v1.LoginResponse](
			httpClient,
			baseURL+IdentityServiceLoginProcedure,
			connect.WithSchema(identityServiceMethods.ByName("Login")),
			connect.WithClientOptions(opts...),
		),
		logout: connect.NewClient[v1.LogoutRequest, emptypb.Empty](
			httpClient,
			baseURL+IdentityServiceLogoutProcedure,
			connect.WithSchema(identityServiceMethods.ByName("Logout")),
			connect.WithClientOptions(opts...),
		),
		refreshToken: connect.NewClient[v1.RefreshTokenRequest, v1.RefreshTokenResponse](
			httpClient,
			baseURL+IdentityServiceRefreshTokenProcedure,
			connect.WithSchema(identityServiceMethods.ByName("RefreshToken")),
			connect.WithClientOptions(opts...),
		),
		validateToken: connect.NewClient[v1.ValidateTokenRequest, v1.ValidateTokenResponse](
			httpClient,
			baseURL+IdentityServiceValidateTokenProcedure,
			connect.WithSchema(identityServiceMethods.ByName("ValidateToken")),
			connect.WithClientOptions(opts...),
		),
		createUser: connect.NewClient[v1.CreateUserRequest, v1.CreateUserResponse](
			httpClient,
			baseURL+IdentityServiceCreateUserProcedure,
			connect.WithSchema(identityServiceMethods.ByName("CreateUser")),
			connect.WithClientOptions(opts...),
		),
		getUser: connect.NewClient[v1.GetUserRequest, v1.GetUserResponse](
			httpClient,
			baseURL+IdentityServiceGetUserProcedure,
			connect.WithSchema(identityServiceMethods.ByName("GetUser")),
			connect.WithClientOptions(opts...),
		),
		updateUser: connect.NewClient[v1.UpdateUserRequest, v1.UpdateUserResponse](
			httpClient,
			baseURL+IdentityServiceUpdateUserProcedure,
			connect.WithSchema(identityServiceMethods.ByName("UpdateUser")),
			connect.WithClientOptions(opts...),
		),
		deleteUser: connect.NewClient[v1.DeleteUserRequest, emptypb.Empty](
			httpClient,
			baseURL+IdentityServiceDeleteUserProcedure,
			connect.WithSchema(identityServiceMethods.ByName("DeleteUser")),
			connect.WithClientOptions(opts...),
		),
		listUsers: connect.NewClient[v1.ListUsersRequest, v1.ListUsersResponse](
			httpClient,
			baseURL+IdentityServiceListUsersProcedure,
			connect.WithSchema(identityServiceMethods.ByName("ListUsers")),
			connect.WithClientOptions(opts...),
		),
		createOrganization: connect.NewClient[v1.CreateOrganizationRequest, v1.CreateOrganizationResponse](
			httpClient,
			baseURL+IdentityServiceCreateOrganizationProcedure,
			connect.WithSchema(identityServiceMethods.ByName("CreateOrganization")),
			connect.WithClientOptions(opts...),
		),
		getOrganization: connect.NewClient[v1.GetOrganizationRequest, v1.GetOrganizationResponse](
			httpClient,
			baseURL+IdentityServiceGetOrganizationProcedure,
			connect.WithSchema(identityServiceMethods.ByName("GetOrganization")),
			connect.WithClientOptions(opts...),
		),
		assignRole: connect.NewClient[v1.AssignRoleRequest, emptypb.Empty](
			httpClient,
			baseURL+IdentityServiceAssignRoleProcedure,
			connect.WithSchema(identityServiceMethods.ByName("AssignRole")),
			connect.WithClientOptions(opts...),
		),
		revokeRole: connect.NewClient[v1.RevokeRoleRequest, emptypb.Empty](
			httpClient,
			baseURL+IdentityServiceRevokeRoleProcedure,
			connect.WithSchema(identityServiceMethods.ByName("RevokeRole")),
			connect.WithClientOptions(opts...),
		),
		checkPermission: connect.NewClient[v1.CheckPermissionRequest, v1.CheckPermissionResponse](
			httpClient,
			baseURL+IdentityServiceCheckPermissionProcedure,
			connect.WithSchema(identityServiceMethods.ByName("CheckPermission")),
			connect.WithClientOptions(opts...),
		),
		health: connect.NewClient[emptypb.Empty, v11.HealthCheckResponse](
			httpClient,
			baseURL+IdentityServiceHealthProcedure,
			connect.WithSchema(identityServiceMethods.ByName("Health")),
			connect.WithClientOptions(opts...),
		),
	}
}

// identityServiceClient implements IdentityServiceClient.
type identityServiceClient struct {
	login              *connect.Client[v1.LoginRequest, v1.LoginResponse]
	logout             *connect.Client[v1.LogoutRequest, emptypb.Empty]
	refreshToken       *connect.Client[v1.RefreshTokenRequest, v1.RefreshTokenResponse]
	validateToken      *connect.Client[v1.ValidateTokenRequest, v1.ValidateTokenResponse]
	createUser         *connect.Client[v1.CreateUserRequest, v1.CreateUserResponse]
	getUser            *connect.Client[v1.GetUserRequest, v1.GetUserResponse]
	updateUser         *connect.Client[v1.UpdateUserRequest, v1.UpdateUserResponse]
	deleteUser         *connect.Client[v1.DeleteUserRequest, emptypb.Empty]
	listUsers          *connect.Client[v1.ListUsersRequest, v1.ListUsersResponse]
	createOrganization *connect.Client[v1.CreateOrganizationRequest, v1.CreateOrganizationResponse]
	getOrganization    *connect.Client[v1.GetOrganizationRequest, v1.GetOrganizationResponse]
	assignRole         *connect.Client[v1.AssignRoleRequest, emptypb.Empty]
	revokeRole         *connect.Client[v1.RevokeRoleRequest, emptypb.Empty]
	checkPermission    *connect.Client[v1.CheckPermissionRequest, v1.CheckPermissionResponse]
	health             *connect.Client[emptypb.Empty, v11.HealthCheckResponse]
}

// Login calls plantd.identity.v1.IdentityService.Login.
func (c *identityServiceClient) Login(ctx context.Context, req *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error) {
	return c.login.CallUnary(ctx, req)
}

// Logout calls plantd.identity.v1.IdentityService.Logout.
func (c *identityServiceClient) Logout(ctx context.Context, req *connect.Request[v1.LogoutRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.logout.CallUnary(ctx, req)
}

// RefreshToken calls plantd.identity.v1.IdentityService.RefreshToken.
func (c *identityServiceClient) RefreshToken(ctx context.Context, req *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error) {
	return c.refreshToken.CallUnary(ctx, req)
}

// ValidateToken calls plantd.identity.v1.IdentityService.ValidateToken.
func (c *identityServiceClient) ValidateToken(ctx context.Context, req *connect.Request[v1.ValidateTokenRequest]) (*connect.Response[v1.ValidateTokenResponse], error) {
	return c.validateToken.CallUnary(ctx, req)
}

// CreateUser calls plantd.identity.v1.IdentityService.CreateUser.
func (c *identityServiceClient) CreateUser(ctx context.Context, req *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error) {
	return c.createUser.CallUnary(ctx, req)
}

// GetUser calls plantd.identity.v1.IdentityService.GetUser.
func (c *identityServiceClient) GetUser(ctx context.Context, req *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error) {
	return c.getUser.CallUnary(ctx, req)
}

// UpdateUser calls plantd.identity.v1.IdentityService.UpdateUser.
func (c *identityServiceClient) UpdateUser(ctx context.Context, req *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error) {
	return c.updateUser.CallUnary(ctx, req)
}

// DeleteUser calls plantd.identity.v1.IdentityService.DeleteUser.
func (c *identityServiceClient) DeleteUser(ctx context.Context, req *connect.Request[v1.DeleteUserRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteUser.CallUnary(ctx, req)
}

// ListUsers calls plantd.identity.v1.IdentityService.ListUsers.
func (c *identityServiceClient) ListUsers(ctx context.Context, req *connect.Request[v1.ListUsersRequest]) (*connect.ServerStreamForClient[v1.ListUsersResponse], error) {
	return c.listUsers.CallServerStream(ctx, req)
}

// CreateOrganization calls plantd.identity.v1.IdentityService.CreateOrganization.
func (c *identityServiceClient) CreateOrganization(ctx context.Context, req *connect.Request[v1.CreateOrganizationRequest]) (*connect.Response[v1.CreateOrganizationResponse], error) {
	return c.createOrganization.CallUnary(ctx, req)
}

// GetOrganization calls plantd.identity.v1.IdentityService.GetOrganization.
func (c *identityServiceClient) GetOrganization(ctx context.Context, req *connect.Request[v1.GetOrganizationRequest]) (*connect.Response[v1.GetOrganizationResponse], error) {
	return c.getOrganization.CallUnary(ctx, req)
}

// AssignRole calls plantd.identity.v1.IdentityService.AssignRole.
func (c *identityServiceClient) AssignRole(ctx context.Context, req *connect.Request[v1.AssignRoleRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.assignRole.CallUnary(ctx, req)
}

// RevokeRole calls plantd.identity.v1.IdentityService.RevokeRole.
func (c *identityServiceClient) RevokeRole(ctx context.Context, req *connect.Request[v1.RevokeRoleRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.revokeRole.CallUnary(ctx, req)
}

// CheckPermission calls plantd.identity.v1.IdentityService.CheckPermission.
func (c *identityServiceClient) CheckPermission(ctx context.Context, req *connect.Request[v1.CheckPermissionRequest]) (*connect.Response[v1.CheckPermissionResponse], error) {
	return c.checkPermission.CallUnary(ctx, req)
}

// Health calls plantd.identity.v1.IdentityService.Health.
func (c *identityServiceClient) Health(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v11.HealthCheckResponse], error) {
	return c.health.CallUnary(ctx, req)
}

// IdentityServiceHandler is an implementation of the plantd.identity.v1.IdentityService service.
type IdentityServiceHandler interface {
	// Authentication
	Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error)
	Logout(context.Context, *connect.Request[v1.LogoutRequest]) (*connect.Response[emptypb.Empty], error)
	RefreshToken(context.Context, *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error)
	ValidateToken(context.Context, *connect.Request[v1.ValidateTokenRequest]) (*connect.Response[v1.ValidateTokenResponse], error)
	// User management
	CreateUser(context.Context, *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error)
	GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error)
	UpdateUser(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error)
	DeleteUser(context.Context, *connect.Request[v1.DeleteUserRequest]) (*connect.Response[emptypb.Empty], error)
	ListUsers(context.Context, *connect.Request[v1.ListUsersRequest], *connect.ServerStream[v1.ListUsersResponse]) error
	// Organization management
	CreateOrganization(context.Context, *connect.Request[v1.CreateOrganizationRequest]) (*connect.Response[v1.CreateOrganizationResponse], error)
	GetOrganization(context.Context, *connect.Request[v1.GetOrganizationRequest]) (*connect.Response[v1.GetOrganizationResponse], error)
	// Role and permission management
	AssignRole(context.Context, *connect.Request[v1.AssignRoleRequest]) (*connect.Response[emptypb.Empty], error)
	RevokeRole(context.Context, *connect.Request[v1.RevokeRoleRequest]) (*connect.Response[emptypb.Empty], error)
	CheckPermission(context.Context, *connect.Request[v1.CheckPermissionRequest]) (*connect.Response[v1.CheckPermissionResponse], error)
	// Service management
	Health(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v11.HealthCheckResponse], error)
}

// NewIdentityServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewIdentityServiceHandler(svc IdentityServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	identityServiceMethods := v1.File_plantd_identity_v1_identity_proto.Services().ByName("IdentityService").Methods()
	identityServiceLoginHandler := connect.NewUnaryHandler(
		IdentityServiceLoginProcedure,
		svc.Login,
		connect.WithSchema(identityServiceMethods.ByName("Login")),
		connect.WithHandlerOptions(opts...),
	)
	identityServiceLogoutHandler := connect.NewUnaryHandler(
		IdentityServiceLogoutProcedure,
		svc.Logout,
		connect.WithSchema(identityServiceMethods.ByName("Logout")),
		connect.WithHandlerOptions(opts...),
	)
	identityServiceRefreshTokenHandler := connect.NewUnaryHandler(
		IdentityServiceRefreshTokenProcedure,
		svc.RefreshToken,
		connect.WithSchema(identityServiceMethods.ByName("RefreshToken")),
		connect.WithHandlerOptions(opts...),
	)
	identityServiceValidateTokenHandler := connect.NewUnaryHandler(
		IdentityServiceValidateTokenProcedure,
		svc.ValidateToken,
		connect.WithSchema(identityServiceMethods.ByName("ValidateToken")),
		connect.WithHandlerOptions(opts...),
	)
	identityServiceCreateUserHandler := connect.NewUnaryHandler(
		IdentityServiceCreateUserProcedure,
		svc.CreateUser,
		connect.WithSchema(identityServiceMethods.ByName("CreateUser")),
		connect.WithHandlerOptions(opts...),
	)
	identityServiceGetUserHandler := connect.NewUnaryHandler(
		IdentityServiceGetUserProcedure,
		svc.GetUser,
		connect.WithSchema(identityServiceMethods.ByName("GetUser")),
		connect.WithHandlerOptions(opts...),
	)
	identityServiceUpdateUserHandler := connect.NewUnaryHandler(
		IdentityServiceUpdateUserProcedure,
		svc.UpdateUser,
		connect.WithSchema(identityServiceMethods.ByName("UpdateUser")),
		connect.WithHandlerOptions(opts...),
	)
	identityServiceDeleteUserHandler := connect.NewUnaryHandler(
		IdentityServiceDeleteUserProcedure,
		svc.DeleteUser,
		connect.WithSchema(identityServiceMethods.ByName("DeleteUser")),
		connect.WithHandlerOptions(opts...),
	)
	identityServiceListUsersHandler := connect.NewServerStreamHandler(
		IdentityServiceListUsersProcedure,
		svc.ListUsers,
		connect.WithSchema(identityServiceMethods.ByName("ListUsers")),
		connect.WithHandlerOptions(opts...),
	)
	identityServiceCreateOrganizationHandler := connect.NewUnaryHandler(
		IdentityServiceCreateOrganizationProcedure,
		svc.CreateOrganization,
		connect.WithSchema(identityServiceMethods.ByName("CreateOrganization")),
		connect.WithHandlerOptions(opts...),
	)
	identityServiceGetOrganizationHandler := connect.NewUnaryHandler(
		IdentityServiceGetOrganizationProcedure,
		svc.GetOrganization,
		connect.WithSchema(identityServiceMethods.ByName("GetOrganization")),
		connect.WithHandlerOptions(opts...),
	)
	identityServiceAssignRoleHandler := connect.NewUnaryHandler(
		IdentityServiceAssignRoleProcedure,
		svc.AssignRole,
		connect.WithSchema(identityServiceMethods.ByName("AssignRole")),
		connect.WithHandlerOptions(opts...),
	)
	identityServiceRevokeRoleHandler := connect.NewUnaryHandler(
		IdentityServiceRevokeRoleProcedure,
		svc.RevokeRole,
		connect.WithSchema(identityServiceMethods.ByName("RevokeRole")),
		connect.WithHandlerOptions(opts...),
	)
	identityServiceCheckPermissionHandler := connect.NewUnaryHandler(
		IdentityServiceCheckPermissionProcedure,
		svc.CheckPermission,
		connect.WithSchema(identityServiceMethods.ByName("CheckPermission")),
		connect.WithHandlerOptions(opts...),
	)
	identityServiceHealthHandler := connect.NewUnaryHandler(
		IdentityServiceHealthProcedure,
		svc.Health,
		connect.WithSchema(identityServiceMethods.ByName("Health")),
		connect.WithHandlerOptions(opts...),
	)
	return "/plantd.identity.v1.IdentityService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case IdentityServiceLoginProcedure:
			identityServiceLoginHandler.ServeHTTP(w, r)
		case IdentityServiceLogoutProcedure:
			identityServiceLogoutHandler.ServeHTTP(w, r)
		case IdentityServiceRefreshTokenProcedure:
			identityServiceRefreshTokenHandler.ServeHTTP(w, r)
		case IdentityServiceValidateTokenProcedure:
			identityServiceValidateTokenHandler.ServeHTTP(w, r)
		case IdentityServiceCreateUserProcedure:
			identityServiceCreateUserHandler.ServeHTTP(w, r)
		case IdentityServiceGetUserProcedure:
			identityServiceGetUserHandler.ServeHTTP(w, r)
		case IdentityServiceUpdateUserProcedure:
			identityServiceUpdateUserHandler.ServeHTTP(w, r)
		case IdentityServiceDeleteUserProcedure:
			identityServiceDeleteUserHandler.ServeHTTP(w, r)
		case IdentityServiceListUsersProcedure:
			identityServiceListUsersHandler.ServeHTTP(w, r)
		case IdentityServiceCreateOrganizationProcedure:
			identityServiceCreateOrganizationHandler.ServeHTTP(w, r)
		case IdentityServiceGetOrganizationProcedure:
			identityServiceGetOrganizationHandler.ServeHTTP(w, r)
		case IdentityServiceAssignRoleProcedure:
			identityServiceAssignRoleHandler.ServeHTTP(w, r)
		case IdentityServiceRevokeRoleProcedure:
			identityServiceRevokeRoleHandler.ServeHTTP(w, r)
		case IdentityServiceCheckPermissionProcedure:
			identityServiceCheckPermissionHandler.ServeHTTP(w, r)
		case IdentityServiceHealthProcedure:
			identityServiceHealthHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedIdentityServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedIdentityServiceHandler struct{}

func (UnimplementedIdentityServiceHandler) Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("plantd.identity.v1.IdentityService.Login is not implemented"))
}

func (UnimplementedIdentityServiceHandler) Logout(context.Context, *connect.Request[v1.LogoutRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("plantd.identity.v1.IdentityService.Logout is not implemented"))
}

func (UnimplementedIdentityServiceHandler) RefreshToken(context.Context, *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("plantd.identity.v1.IdentityService.RefreshToken is not implemented"))
}

func (UnimplementedIdentityServiceHandler) ValidateToken(context.Context, *connect.Request[v1.ValidateTokenRequest]) (*connect.Response[v1.ValidateTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("plantd.identity.v1.IdentityService.ValidateToken is not implemented"))
}

func (UnimplementedIdentityServiceHandler) CreateUser(context.Context, *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("plantd.identity.v1.IdentityService.CreateUser is not implemented"))
}

func (UnimplementedIdentityServiceHandler) GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("plantd.identity.v1.IdentityService.GetUser is not implemented"))
}

func (UnimplementedIdentityServiceHandler) UpdateUser(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("plantd.identity.v1.IdentityService.UpdateUser is not implemented"))
}

func (UnimplementedIdentityServiceHandler) DeleteUser(context.Context, *connect.Request[v1.DeleteUserRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("plantd.identity.v1.IdentityService.DeleteUser is not implemented"))
}

func (UnimplementedIdentityServiceHandler) ListUsers(context.Context, *connect.Request[v1.ListUsersRequest], *connect.ServerStream[v1.ListUsersResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("plantd.identity.v1.IdentityService.ListUsers is not implemented"))
}

func (UnimplementedIdentityServiceHandler) CreateOrganization(context.Context, *connect.Request[v1.CreateOrganizationRequest]) (*connect.Response[v1.CreateOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("plantd.identity.v1.IdentityService.CreateOrganization is not implemented"))
}

func (UnimplementedIdentityServiceHandler) GetOrganization(context.Context, *connect.Request[v1.GetOrganizationRequest]) (*connect.Response[v1.GetOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("plantd.identity.v1.IdentityService.GetOrganization is not implemented"))
}

func (UnimplementedIdentityServiceHandler) AssignRole(context.Context, *connect.Request[v1.AssignRoleRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("plantd.identity.v1.IdentityService.AssignRole is not implemented"))
}

func (UnimplementedIdentityServiceHandler) RevokeRole(context.Context, *connect.Request[v1.RevokeRoleRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("plantd.identity.v1.IdentityService.RevokeRole is not implemented"))
}

func (UnimplementedIdentityServiceHandler) CheckPermission(context.Context, *connect.Request[v1.CheckPermissionRequest]) (*connect.Response[v1.CheckPermissionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("plantd.identity.v1.IdentityService.CheckPermission is not implemented"))
}

func (UnimplementedIdentityServiceHandler) Health(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v11.HealthCheckResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("plantd.identity.v1.IdentityService.Health is not implemented"))
}
