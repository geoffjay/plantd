// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: plantd/health/v1/health.proto

package healthv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/geoffjay/plantd/gen/proto/go/plantd/health/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// HealthServiceName is the fully-qualified name of the HealthService service.
	HealthServiceName = "plantd.health.v1.HealthService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// HealthServiceCheckProcedure is the fully-qualified name of the HealthService's Check RPC.
	HealthServiceCheckProcedure = "/plantd.health.v1.HealthService/Check"
	// HealthServiceWatchProcedure is the fully-qualified name of the HealthService's Watch RPC.
	HealthServiceWatchProcedure = "/plantd.health.v1.HealthService/Watch"
)

// HealthServiceClient is a client for the plantd.health.v1.HealthService service.
type HealthServiceClient interface {
	// Check service health (replaces MDP heartbeat)
	Check(context.Context, *connect.Request[v1.HealthCheckRequest]) (*connect.Response[v1.HealthCheckResponse], error)
	// Watch service health changes
	Watch(context.Context, *connect.Request[v1.HealthWatchRequest]) (*connect.ServerStreamForClient[v1.HealthCheckResponse], error)
}

// NewHealthServiceClient constructs a client for the plantd.health.v1.HealthService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewHealthServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) HealthServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	healthServiceMethods := v1.File_plantd_health_v1_health_proto.Services().ByName("HealthService").Methods()
	return &healthServiceClient{
		check: connect.NewClient[v1.HealthCheckRequest, v1.HealthCheckResponse](
			httpClient,
			baseURL+HealthServiceCheckProcedure,
			connect.WithSchema(healthServiceMethods.ByName("Check")),
			connect.WithClientOptions(opts...),
		),
		watch: connect.NewClient[v1.HealthWatchRequest, v1.HealthCheckResponse](
			httpClient,
			baseURL+HealthServiceWatchProcedure,
			connect.WithSchema(healthServiceMethods.ByName("Watch")),
			connect.WithClientOptions(opts...),
		),
	}
}

// healthServiceClient implements HealthServiceClient.
type healthServiceClient struct {
	check *connect.Client[v1.HealthCheckRequest, v1.HealthCheckResponse]
	watch *connect.Client[v1.HealthWatchRequest, v1.HealthCheckResponse]
}

// Check calls plantd.health.v1.HealthService.Check.
func (c *healthServiceClient) Check(ctx context.Context, req *connect.Request[v1.HealthCheckRequest]) (*connect.Response[v1.HealthCheckResponse], error) {
	return c.check.CallUnary(ctx, req)
}

// Watch calls plantd.health.v1.HealthService.Watch.
func (c *healthServiceClient) Watch(ctx context.Context, req *connect.Request[v1.HealthWatchRequest]) (*connect.ServerStreamForClient[v1.HealthCheckResponse], error) {
	return c.watch.CallServerStream(ctx, req)
}

// HealthServiceHandler is an implementation of the plantd.health.v1.HealthService service.
type HealthServiceHandler interface {
	// Check service health (replaces MDP heartbeat)
	Check(context.Context, *connect.Request[v1.HealthCheckRequest]) (*connect.Response[v1.HealthCheckResponse], error)
	// Watch service health changes
	Watch(context.Context, *connect.Request[v1.HealthWatchRequest], *connect.ServerStream[v1.HealthCheckResponse]) error
}

// NewHealthServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewHealthServiceHandler(svc HealthServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	healthServiceMethods := v1.File_plantd_health_v1_health_proto.Services().ByName("HealthService").Methods()
	healthServiceCheckHandler := connect.NewUnaryHandler(
		HealthServiceCheckProcedure,
		svc.Check,
		connect.WithSchema(healthServiceMethods.ByName("Check")),
		connect.WithHandlerOptions(opts...),
	)
	healthServiceWatchHandler := connect.NewServerStreamHandler(
		HealthServiceWatchProcedure,
		svc.Watch,
		connect.WithSchema(healthServiceMethods.ByName("Watch")),
		connect.WithHandlerOptions(opts...),
	)
	return "/plantd.health.v1.HealthService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case HealthServiceCheckProcedure:
			healthServiceCheckHandler.ServeHTTP(w, r)
		case HealthServiceWatchProcedure:
			healthServiceWatchHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedHealthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedHealthServiceHandler struct{}

func (UnimplementedHealthServiceHandler) Check(context.Context, *connect.Request[v1.HealthCheckRequest]) (*connect.Response[v1.HealthCheckResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("plantd.health.v1.HealthService.Check is not implemented"))
}

func (UnimplementedHealthServiceHandler) Watch(context.Context, *connect.Request[v1.HealthWatchRequest], *connect.ServerStream[v1.HealthCheckResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("plantd.health.v1.HealthService.Watch is not implemented"))
}
