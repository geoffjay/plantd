---
description: 
globs: 
alwaysApply: false
---
# Code Formatting Rules for Readability

## Overview
These rules prioritize human readability and maintainability over brevity. Code should be formatted to be easily scannable and modifiable.

## Multi-line Function Calls and Method Chaining

### Preferred: Fluent Style with Trailing Commas
When breaking function calls or method chains across multiple lines, use trailing commas on all arguments to enable easy modification and improve readability.

**✅ Preferred:**
```go
log.WithFields(
    log.Fields{"error": err},
).Error(
    "failed while receiving request",
)
```

**❌ Avoid:**
```go
log.WithFields(log.Fields{"error": err}).Error(
    "failed while receiving request")
```

### Function Calls with Multiple Arguments
Break long function calls with each argument on its own line, including trailing commas:

**✅ Preferred:**
```go
result := SomeFunction(
    firstArgument,
    secondArgument,
    thirdArgument,
)
```

**❌ Avoid:**
```go
result := SomeFunction(firstArgument, secondArgument,
    thirdArgument)
```

### Struct Initialization
Use trailing commas in multi-line struct initialization:

**✅ Preferred:**
```go
config := &Config{
    Name:     "example",
    Timeout:  30 * time.Second,
    Retries:  3,
    Endpoint: "https://api.example.com",
}
```

**❌ Avoid:**
```go
config := &Config{
    Name:     "example",
    Timeout:  30 * time.Second,
    Retries:  3,
    Endpoint: "https://api.example.com"}
```

## Method Chaining

### Long Method Chains
Break method chains so each method call is on its own line:

**✅ Preferred:**
```go
result := builder.
    WithName("example").
    WithTimeout(30).
    WithRetries(3).
    Build()
```

**❌ Avoid:**
```go
result := builder.WithName("example").WithTimeout(30).WithRetries(3).Build()
```

## Error Handling with Logging

### Multi-line Error Logging
For error logging with fields, use the fluent style:

**✅ Preferred:**
```go
log.WithFields(
    log.Fields{
        "context": "service.worker",
        "error":   err,
        "request": requestID,
    },
).Error(
    "failed to process request",
)
```

**❌ Avoid:**
```go
log.WithFields(log.Fields{
    "context": "service.worker",
    "error":   err,
    "request": requestID}).Error("failed to process request")
```

## Function Definitions

### Long Parameter Lists
Break function definitions with many parameters:

**✅ Preferred:**
```go
func ProcessRequest(
    ctx context.Context,
    userID string,
    requestData []byte,
    timeout time.Duration,
) (Result, error) {
    // function body
}
```

**❌ Avoid:**
```go
func ProcessRequest(ctx context.Context, userID string, requestData []byte, timeout time.Duration) (Result, error) {
    // function body
}
```

## Array and Slice Initialization

### Multi-line Arrays/Slices
Use trailing commas for multi-line array/slice initialization:

**✅ Preferred:**
```go
items := []string{
    "first",
    "second", 
    "third",
}
```

**❌ Avoid:**
```go
items := []string{
    "first",
    "second", 
    "third"}
```

## Map Initialization

### Multi-line Maps
Format maps with each key-value pair on its own line:

**✅ Preferred:**
```go
config := map[string]interface{}{
    "host":     "localhost",
    "port":     8080,
    "timeout":  30,
    "retries":  3,
}
```

## General Principles

1. **Trailing Commas**: Always use trailing commas in multi-line constructs to:
   - Make adding/removing items easier
   - Reduce diff noise in version control
   - Enable consistent formatting

2. **Consistent Indentation**: Use consistent indentation (tabs in Go) for all nested elements

3. **One Item Per Line**: In multi-line constructs, put each item on its own line for better readability

4. **Method Chaining**: Break method chains at logical points, typically one method per line

5. **Line Length**: While not strictly enforced, prefer breaking lines around 80-100 characters for better readability

## Benefits

This formatting style provides:
- **Easy Modification**: Adding or removing arguments/fields requires minimal changes
- **Better Diffs**: Version control diffs are cleaner and more focused
- **Improved Readability**: Code structure is more apparent at a glance
- **Consistent Style**: Reduces cognitive load when reading code
- **Error Reduction**: Less likely to miss commas or make syntax errors when modifying code

## Language-Specific Notes

While these examples focus on Go, similar principles apply to other languages:
- JavaScript/TypeScript: Use trailing commas in objects, arrays, and function calls
- Python: Use trailing commas in lists, tuples, and function calls
- Rust: Use trailing commas in structs, enums, and function calls

Apply these formatting rules consistently across the codebase to maintain readability and ease of maintenance.
